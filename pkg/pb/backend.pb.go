// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/backend.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FunctionConfig_Type int32

const (
	FunctionConfig_GRPC FunctionConfig_Type = 0
	FunctionConfig_REST FunctionConfig_Type = 1
)

var FunctionConfig_Type_name = map[int32]string{
	0: "GRPC",
	1: "REST",
}

var FunctionConfig_Type_value = map[string]int32{
	"GRPC": 0,
	"REST": 1,
}

func (x FunctionConfig_Type) String() string {
	return proto.EnumName(FunctionConfig_Type_name, int32(x))
}

func (FunctionConfig_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8dab762378f455cd, []int{0, 0}
}

// Configuration for the Match Function to be triggered by Open Match to
// generate proposals.
type FunctionConfig struct {
	Host                 string              `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Type                 FunctionConfig_Type `protobuf:"varint,3,opt,name=type,proto3,enum=api.FunctionConfig_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FunctionConfig) Reset()         { *m = FunctionConfig{} }
func (m *FunctionConfig) String() string { return proto.CompactTextString(m) }
func (*FunctionConfig) ProtoMessage()    {}
func (*FunctionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dab762378f455cd, []int{0}
}

func (m *FunctionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FunctionConfig.Unmarshal(m, b)
}
func (m *FunctionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FunctionConfig.Marshal(b, m, deterministic)
}
func (m *FunctionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionConfig.Merge(m, src)
}
func (m *FunctionConfig) XXX_Size() int {
	return xxx_messageInfo_FunctionConfig.Size(m)
}
func (m *FunctionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionConfig proto.InternalMessageInfo

func (m *FunctionConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *FunctionConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *FunctionConfig) GetType() FunctionConfig_Type {
	if m != nil {
		return m.Type
	}
	return FunctionConfig_GRPC
}

type FetchMatchesRequest struct {
	// Configuration of the MatchFunction to be executed for the given list of MatchProfiles
	Config *FunctionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// MatchProfiles for which this MatchFunction should be executed.
	Profiles             []*MatchProfile `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FetchMatchesRequest) Reset()         { *m = FetchMatchesRequest{} }
func (m *FetchMatchesRequest) String() string { return proto.CompactTextString(m) }
func (*FetchMatchesRequest) ProtoMessage()    {}
func (*FetchMatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dab762378f455cd, []int{1}
}

func (m *FetchMatchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchMatchesRequest.Unmarshal(m, b)
}
func (m *FetchMatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchMatchesRequest.Marshal(b, m, deterministic)
}
func (m *FetchMatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMatchesRequest.Merge(m, src)
}
func (m *FetchMatchesRequest) XXX_Size() int {
	return xxx_messageInfo_FetchMatchesRequest.Size(m)
}
func (m *FetchMatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMatchesRequest proto.InternalMessageInfo

func (m *FetchMatchesRequest) GetConfig() *FunctionConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *FetchMatchesRequest) GetProfiles() []*MatchProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type FetchMatchesResponse struct {
	// Result Match for the requested MatchProfile.
	// Note that OpenMatch will validate the proposals, a valid match should contain at least one ticket.
	Matches              []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchMatchesResponse) Reset()         { *m = FetchMatchesResponse{} }
func (m *FetchMatchesResponse) String() string { return proto.CompactTextString(m) }
func (*FetchMatchesResponse) ProtoMessage()    {}
func (*FetchMatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dab762378f455cd, []int{2}
}

func (m *FetchMatchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchMatchesResponse.Unmarshal(m, b)
}
func (m *FetchMatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchMatchesResponse.Marshal(b, m, deterministic)
}
func (m *FetchMatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMatchesResponse.Merge(m, src)
}
func (m *FetchMatchesResponse) XXX_Size() int {
	return xxx_messageInfo_FetchMatchesResponse.Size(m)
}
func (m *FetchMatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMatchesResponse proto.InternalMessageInfo

func (m *FetchMatchesResponse) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type AssignTicketsRequest struct {
	// List of Ticket IDs for which the Assignment is to be made.
	TicketIds []string `protobuf:"bytes,1,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
	// Assignment to be associated with the Ticket IDs.
	Assignment           *Assignment `protobuf:"bytes,2,opt,name=assignment,proto3" json:"assignment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AssignTicketsRequest) Reset()         { *m = AssignTicketsRequest{} }
func (m *AssignTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*AssignTicketsRequest) ProtoMessage()    {}
func (*AssignTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dab762378f455cd, []int{3}
}

func (m *AssignTicketsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignTicketsRequest.Unmarshal(m, b)
}
func (m *AssignTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignTicketsRequest.Marshal(b, m, deterministic)
}
func (m *AssignTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignTicketsRequest.Merge(m, src)
}
func (m *AssignTicketsRequest) XXX_Size() int {
	return xxx_messageInfo_AssignTicketsRequest.Size(m)
}
func (m *AssignTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignTicketsRequest proto.InternalMessageInfo

func (m *AssignTicketsRequest) GetTicketIds() []string {
	if m != nil {
		return m.TicketIds
	}
	return nil
}

func (m *AssignTicketsRequest) GetAssignment() *Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

type AssignTicketsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignTicketsResponse) Reset()         { *m = AssignTicketsResponse{} }
func (m *AssignTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*AssignTicketsResponse) ProtoMessage()    {}
func (*AssignTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dab762378f455cd, []int{4}
}

func (m *AssignTicketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignTicketsResponse.Unmarshal(m, b)
}
func (m *AssignTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignTicketsResponse.Marshal(b, m, deterministic)
}
func (m *AssignTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignTicketsResponse.Merge(m, src)
}
func (m *AssignTicketsResponse) XXX_Size() int {
	return xxx_messageInfo_AssignTicketsResponse.Size(m)
}
func (m *AssignTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignTicketsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("api.FunctionConfig_Type", FunctionConfig_Type_name, FunctionConfig_Type_value)
	proto.RegisterType((*FunctionConfig)(nil), "api.FunctionConfig")
	proto.RegisterType((*FetchMatchesRequest)(nil), "api.FetchMatchesRequest")
	proto.RegisterType((*FetchMatchesResponse)(nil), "api.FetchMatchesResponse")
	proto.RegisterType((*AssignTicketsRequest)(nil), "api.AssignTicketsRequest")
	proto.RegisterType((*AssignTicketsResponse)(nil), "api.AssignTicketsResponse")
}

func init() { proto.RegisterFile("api/backend.proto", fileDescriptor_8dab762378f455cd) }

var fileDescriptor_8dab762378f455cd = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x5d, 0x4f, 0xdb, 0x48,
	0x14, 0x5d, 0x3b, 0x59, 0x3e, 0x86, 0x5d, 0x16, 0x06, 0x76, 0x37, 0x58, 0xfb, 0xe1, 0xba, 0x54,
	0x8a, 0x52, 0xe2, 0x01, 0x97, 0xa7, 0xb4, 0x95, 0x08, 0x14, 0x2a, 0x24, 0xda, 0x22, 0x83, 0xfa,
	0xd0, 0x97, 0xca, 0x19, 0xdf, 0xd8, 0x53, 0x92, 0x99, 0xc1, 0x33, 0x86, 0xf2, 0xca, 0x4f, 0x68,
	0xdf, 0xfa, 0x2f, 0xfa, 0x5b, 0xfa, 0xd2, 0xf7, 0xf6, 0x77, 0x54, 0x95, 0xc7, 0x09, 0x49, 0x20,
	0x4f, 0x19, 0x9f, 0x73, 0xe6, 0xdc, 0x73, 0x6f, 0xae, 0x8d, 0x96, 0x23, 0xc9, 0x48, 0x27, 0xa2,
	0x67, 0xc0, 0x63, 0x5f, 0x66, 0x42, 0x0b, 0x5c, 0x89, 0x24, 0x73, 0x70, 0x81, 0xf7, 0x41, 0xa9,
	0x28, 0x01, 0x55, 0x12, 0xce, 0x3f, 0x89, 0x10, 0x49, 0x0f, 0x48, 0x41, 0x45, 0x9c, 0x0b, 0x1d,
	0x69, 0x26, 0xf8, 0x90, 0xdd, 0x30, 0x3f, 0xb4, 0x99, 0x00, 0x6f, 0xaa, 0xcb, 0x28, 0x49, 0x20,
	0x23, 0x42, 0x1a, 0xc5, 0x5d, 0xb5, 0x77, 0x6d, 0xa1, 0xc5, 0x83, 0x9c, 0xd3, 0x02, 0xdb, 0x13,
	0xbc, 0xcb, 0x12, 0x8c, 0x51, 0x35, 0x15, 0x4a, 0xd7, 0x2c, 0xd7, 0xaa, 0xcf, 0x87, 0xe6, 0x5c,
	0x60, 0x52, 0x64, 0xba, 0x66, 0xbb, 0x56, 0xfd, 0xd7, 0xd0, 0x9c, 0xf1, 0x06, 0xaa, 0xea, 0x2b,
	0x09, 0xb5, 0x8a, 0x6b, 0xd5, 0x17, 0x83, 0x9a, 0x1f, 0x49, 0xe6, 0x4f, 0x5a, 0xf9, 0xa7, 0x57,
	0x12, 0x42, 0xa3, 0xf2, 0x1c, 0x54, 0x2d, 0x9e, 0xf0, 0x1c, 0xaa, 0x3e, 0x0f, 0x8f, 0xf7, 0x96,
	0x7e, 0x29, 0x4e, 0xe1, 0xfe, 0xc9, 0xe9, 0x92, 0xe5, 0x9d, 0xa3, 0x95, 0x03, 0xd0, 0x34, 0x7d,
	0x11, 0x69, 0x9a, 0x82, 0x0a, 0xe1, 0x3c, 0x07, 0xa5, 0xf1, 0x43, 0x34, 0x43, 0x8d, 0x8f, 0x89,
	0xb2, 0x10, 0xac, 0x4c, 0x29, 0x11, 0x0e, 0x24, 0xb8, 0x89, 0xe6, 0x64, 0x26, 0xba, 0xac, 0x07,
	0xaa, 0x66, 0xbb, 0x95, 0xfa, 0x42, 0xb0, 0x6c, 0xe4, 0xc6, 0xf3, 0xb8, 0x64, 0xc2, 0x1b, 0x89,
	0xf7, 0x04, 0xad, 0x4e, 0x96, 0x54, 0x52, 0x70, 0x05, 0x78, 0x1d, 0xcd, 0xf6, 0x4b, 0xa8, 0x66,
	0x19, 0x17, 0x34, 0x72, 0x09, 0x87, 0x94, 0xd7, 0x45, 0xab, 0x6d, 0xa5, 0x58, 0xc2, 0x4f, 0x19,
	0x3d, 0x03, 0x7d, 0x93, 0xf8, 0x5f, 0x84, 0xb4, 0x41, 0xde, 0xb2, 0xb8, 0x34, 0x98, 0x0f, 0xe7,
	0x4b, 0xe4, 0x30, 0x56, 0x98, 0x20, 0x14, 0x99, 0x6b, 0x7d, 0xe0, 0xe5, 0x2c, 0x17, 0x82, 0x3f,
	0x8c, 0x7f, 0xfb, 0x06, 0x0e, 0xc7, 0x24, 0xde, 0xdf, 0xe8, 0xcf, 0x5b, 0x75, 0xca, 0x98, 0xc1,
	0x37, 0x0b, 0xcd, 0xee, 0x96, 0xdb, 0x82, 0x19, 0xfa, 0x6d, 0xbc, 0x15, 0x3c, 0xf8, 0x27, 0xee,
	0x0e, 0xd4, 0x59, 0x9b, 0xc2, 0x94, 0x86, 0xde, 0xfa, 0xf5, 0x97, 0xef, 0x1f, 0xed, 0xff, 0xbc,
	0x35, 0x72, 0xb1, 0x35, 0xdc, 0x43, 0x32, 0x68, 0xb7, 0xd5, 0x2d, 0x6e, 0xb4, 0xac, 0x06, 0xee,
	0xa3, 0xdf, 0x27, 0xf2, 0xe0, 0xb5, 0xb1, 0xf4, 0x93, 0xb3, 0x70, 0x9c, 0x69, 0xd4, 0xa0, 0xda,
	0x03, 0x53, 0xed, 0x7f, 0xcf, 0x19, 0xaf, 0x56, 0xce, 0x49, 0xb5, 0xca, 0xfe, 0x5b, 0x56, 0x63,
	0xf7, 0x87, 0xfd, 0xa1, 0xfd, 0xd5, 0xc6, 0x9f, 0x47, 0xcd, 0x7a, 0x87, 0x08, 0xbd, 0x92, 0xc0,
	0x5d, 0x93, 0x1f, 0xff, 0x95, 0x6a, 0x2d, 0x55, 0x8b, 0x10, 0x21, 0x81, 0x37, 0x4d, 0x5c, 0x3f,
	0x86, 0x0b, 0xe7, 0xfe, 0xe8, 0xb9, 0x19, 0x33, 0x45, 0x73, 0xa5, 0x76, 0xca, 0x97, 0x26, 0xc9,
	0x44, 0x2e, 0x95, 0x4f, 0x45, 0xbf, 0xf1, 0x1a, 0xe1, 0xb6, 0x8c, 0x68, 0x0a, 0x6e, 0xe0, 0x6f,
	0xba, 0x47, 0x8c, 0x42, 0xb1, 0x00, 0x3b, 0x43, 0xcb, 0x84, 0xe9, 0x34, 0xef, 0x14, 0x4a, 0x52,
	0x5e, 0xed, 0x8a, 0x2c, 0x89, 0xfa, 0xa0, 0xc6, 0x8a, 0x91, 0x4e, 0x4f, 0x74, 0x48, 0x3f, 0x52,
	0x1a, 0x32, 0x72, 0x74, 0xb8, 0xb7, 0xff, 0xf2, 0x64, 0x3f, 0xa8, 0x6c, 0xf9, 0x9b, 0x0d, 0xdb,
	0xb2, 0x83, 0xa5, 0x48, 0xca, 0x1e, 0xa3, 0xe6, 0x7d, 0x23, 0xef, 0x94, 0xe0, 0xad, 0x3b, 0x48,
	0xf8, 0x18, 0x55, 0xb6, 0x37, 0xb7, 0xf1, 0x36, 0x6a, 0x84, 0xa0, 0xf3, 0x8c, 0x43, 0xec, 0x5e,
	0xa6, 0xc0, 0x5d, 0x9d, 0x82, 0x9b, 0x81, 0x12, 0x79, 0x46, 0xc1, 0x8d, 0x05, 0x28, 0x97, 0x0b,
	0xed, 0xc2, 0x7b, 0xa6, 0xb4, 0x8f, 0x67, 0x50, 0xf5, 0x93, 0x6d, 0xcd, 0x66, 0x4f, 0x51, 0x6d,
	0x34, 0x0c, 0xf7, 0x99, 0xa0, 0x79, 0xb1, 0x35, 0xc6, 0x1d, 0xdf, 0x9b, 0x3e, 0x1a, 0xa2, 0x98,
	0x06, 0x12, 0x0b, 0xaa, 0xc8, 0x1b, 0xf7, 0x16, 0x35, 0xd6, 0x97, 0x3c, 0x4b, 0x88, 0xec, 0x74,
	0x66, 0xcc, 0x47, 0xe2, 0xd1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xb3, 0x5c, 0xc4, 0x9e,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendClient interface {
	// FetchMatch triggers execution of the specfied MatchFunction for each of the
	// specified MatchProfiles. Each MatchFunction execution returns a set of
	// proposals which are then evaluated to generate results. FetchMatch method
	// streams these results back to the caller.
	FetchMatches(ctx context.Context, in *FetchMatchesRequest, opts ...grpc.CallOption) (*FetchMatchesResponse, error)
	// AssignTickets sets the specified Assignment on the Tickets for the Ticket
	// IDs passed.
	AssignTickets(ctx context.Context, in *AssignTicketsRequest, opts ...grpc.CallOption) (*AssignTicketsResponse, error)
}

type backendClient struct {
	cc *grpc.ClientConn
}

func NewBackendClient(cc *grpc.ClientConn) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) FetchMatches(ctx context.Context, in *FetchMatchesRequest, opts ...grpc.CallOption) (*FetchMatchesResponse, error) {
	out := new(FetchMatchesResponse)
	err := c.cc.Invoke(ctx, "/api.Backend/FetchMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) AssignTickets(ctx context.Context, in *AssignTicketsRequest, opts ...grpc.CallOption) (*AssignTicketsResponse, error) {
	out := new(AssignTicketsResponse)
	err := c.cc.Invoke(ctx, "/api.Backend/AssignTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
type BackendServer interface {
	// FetchMatch triggers execution of the specfied MatchFunction for each of the
	// specified MatchProfiles. Each MatchFunction execution returns a set of
	// proposals which are then evaluated to generate results. FetchMatch method
	// streams these results back to the caller.
	FetchMatches(context.Context, *FetchMatchesRequest) (*FetchMatchesResponse, error)
	// AssignTickets sets the specified Assignment on the Tickets for the Ticket
	// IDs passed.
	AssignTickets(context.Context, *AssignTicketsRequest) (*AssignTicketsResponse, error)
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

func _Backend_FetchMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).FetchMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Backend/FetchMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).FetchMatches(ctx, req.(*FetchMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_AssignTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AssignTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Backend/AssignTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AssignTickets(ctx, req.(*AssignTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchMatches",
			Handler:    _Backend_FetchMatches_Handler,
		},
		{
			MethodName: "AssignTickets",
			Handler:    _Backend_AssignTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/backend.proto",
}
