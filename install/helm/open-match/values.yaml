# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for open-match.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

swaggerui: &swaggerui
  hostName: om-swaggerui
  httpPort: 51500
  portType: ClusterIP
  replicas: 3
  image: openmatch-swaggerui
mmlogic: &mmlogic
  hostName: om-mmlogic
  grpcPort: 50503
  httpPort: 51503
  portType: ClusterIP
  replicas: 3
  image: openmatch-mmlogic
frontend: &frontend
  hostName: om-frontend
  grpcPort: 50504
  httpPort: 51504
  portType: ClusterIP
  replicas: 3
  image: openmatch-frontend
backend: &backend
  hostName: om-backend
  grpcPort: 50505
  httpPort: 51505
  portType: ClusterIP
  replicas: 3
  image: openmatch-backend
synchronizer: &synchronizer
  hostName: om-synchronizer
  grpcPort: 50506
  httpPort: 51506
  portType: ClusterIP
  replicas: 1
  image: openmatch-synchronizer
evaluator: &evaluator
  hostName: om-evaluator
  grpcPort: 50508
  httpPort: 51508
  replicas: 3
function: &function
  hostName: om-function
  grpcPort: 50502
  httpPort: 51502
  replicas: 3

image:
  registry: gcr.io/open-match-public-images
  tag: 0.0.0-dev
  pullPolicy: Always

ticketIndices:
- char.cleric
- char.knight
- char.paladin
- map.aleroth
- map.oasis
- mmr.rating
- mode.battleroyale
- mode.ctf
- mode.demo
- region.europe-east1
- region.europe-west1
- region.europe-west2
- region.europe-west3
- region.europe-west4
- role.dps
- role.support
- role.tank

configs:
  om-configmap:
    volumeName: om-config-volume
    mountPath: /app/config/om

# https://hub.helm.sh/charts/stable/redis
# https://github.com/helm/charts/tree/master/stable/redis
redis:
  fullnameOverride: om-redis
  usePassword: true
  master:
    disableCommands: [] # don't disable 'FLUSH-' commands
  metrics:
    enabled: true

open-match-core:
  enabled: true

open-match-demo:
  # Switch the value between true/false to turn on/off this subchart
  enabled: true
  function: *function
  frontend: *frontend
  backend: *backend

open-match-telemetry:
  # Switch the value between true/false to turn on/off this subchart
  enabled: true

open-match-customize:
  # Switch the value between true/false to turn on/off this subchart
  enabled: true
  evaluator: *evaluator
  function: *function
  mmlogic: *mmlogic
  # You can customize Open Match by enabling open-match-customize subchart
  # and override the evaluator/mmf image 
  # image:
  #   registry: [YOUR_COMPONENT_REGISTRY]
  #   tag: [YOUR_COMPONENT_IMAGE_VERSION]
  #   pullPolicy: Always
  # evaluator:
  #   image: [YOUR_EVALUATOR_IMAGE]
  # function:
  #   image: [YOUR_MMF_IMAGE]

open-match-test:
  # Switch the value between true/false to turn on/off this subchart
  enabled: false
  mmlogic: *mmlogic
  frontend: *frontend
  backend: *backend
  synchronizer: *synchronizer

# Global configurations that are visible to all subcharts
global:
  kubernetes:
    # Defines a service account which provides an identity for processes that run in a Pod in Open Match.
    serviceAccount: open-match-unprivileged-service
    service:
      portType:
  
  gcpProjectId: "replace_with_your_project_id"
  
  # Defines if Open Match needs to serve secure traffic
  tls: 
    enabled: false
    server:
      mountPath: /app/secrets/tls/server
    rootca:
      mountPath: /app/secrets/tls/rootca
  
  logging:
    rpc:
      enabled: true

  configs:
    global-configmap:
      volumeName: global-config-volume
      mountPath: /app/config/global
  
  image:
    registry:
    tag:
  
  # Expose the telemetry configurations to all subcharts because prometheus, for example, 
  # requires pod-level annotation to customize its scrape path.
  # See definitions in templates/_helpers.tpl - "prometheus.annotations" section for details
  telemetry:
    zpages:
      enabled: true
    jaeger:
      enabled: false
      agentEndpoint: "open-match-jaeger-agent:6831"
      collectorEndpoint: "http://open-match-jaeger-collector:14268/api/traces"
    prometheus:
      enabled: false
      endpoint: "/metrics"
      serviceDiscovery: true
    stackdriver:
      enabled: true
      metricPrefix: "open_match"
    zipkin:
      enabled: false
      endpoint: "/zipkin"
      reporterEndpoint: "zipkin" 
    grafana:
      enabled: false
    reportingPeriod: "1m"
