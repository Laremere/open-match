# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for open-match-core.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

swaggerui:
  hostName: om-swaggerui
  httpPort: 51500
  portType: LoadBalancer
  replicas: 3
  image: openmatch-swaggerui
mmlogic:
  hostName: om-mmlogic
  grpcPort: 50503
  httpPort: 51503
  portType: LoadBalancer
  replicas: 3
  image: openmatch-mmlogic
frontend:
  hostName: om-frontend
  grpcPort: 50504
  httpPort: 51504
  portType: LoadBalancer
  replicas: 3
  image: openmatch-frontend
backend:
  hostName: om-backend
  grpcPort: 50505
  httpPort: 51505
  portType: LoadBalancer
  replicas: 3
  image: openmatch-backend
synchronizer:
  hostName: om-synchronizer
  grpcPort: 50506
  httpPort: 51506
  portType: LoadBalancer
  replicas: 1
  image: openmatch-synchronizer

image:
  registry: gcr.io/open-match-public-images
  tag: 0.0.0-dev
  pullPolicy: Always

ticketIndices: &ticketIndicesData
- char.cleric
- char.knight
- char.paladin
- map.aleroth
- map.oasis
- mmr.rating
- mode.battleroyale
- mode.ctf
- mode.demo
- region.europe-east1
- region.europe-west1
- region.europe-west2
- region.europe-west3
- region.europe-west4
- role.dps
- role.support
- role.tank

# TODO: Split tls configs into a separate config file. For now Open Match assumes core components share the same secure mode
# with the mmfs and evaluator, so we have to copy these secure settings and define a new configmap for it whenever we what 
# to create a new evaluator and mmf. We should create a global configmap for the security settings for all subcharts 
# under the /install/helm/open-match directory to avoid copy&paste files around.
config:
  mountPath: /app/config
  volumeName: om-config-volume
  mapName: om-configmap
  files:
    matchmaker_config.yaml:
      logging:
        level: debug
        format: text
        rpc: false
      # Open Match applies the exponential backoff strategy for its retryable gRPC calls.
      # The settings below are the default backoff configuration used in Open Match.
      # See https://github.com/cenkalti/backoff/blob/v3/exponential.go for detailed explanations
      backoff:
        # The initial retry interval (in milliseconds)
        initialInterval: 100ms
        # maxInterval caps the maximum time elapsed for a retry interval
        maxInterval: 500ms
        # The next retry interval is multiplied by this multiplier
        multiplier: 1.5
        # Randomize the retry interval
        randFactor: 0.5
        # maxElapsedTime caps the retry time (in milliseconds)
        maxElapsedTime: 3000ms

      api:
        # TODO: Figure out how to key this off of tls.enabled=true. For now someone can uncomment these to turn it on.
        #tls:
        #  trustedCertificatePath: "{{.Values.openmatch.tls.root.mountPath}}/public.cert"
        #  certificatefile: "{{.Values.openmatch.tls.server.mountPath}}/public.cert"
        #  privatekey: "{{.Values.openmatch.tls.server.mountPath}}/private.key"
        #  rootcertificatefile: "{{.Values.openmatch.tls.root.mountPath}}/public.cert"
        backend:
          hostname: "{{ .Values.backend.hostName }}"
          grpcport: "{{ .Values.backend.grpcPort }}"
          httpport: "{{ .Values.backend.httpPort }}"
        frontend:
          hostname: "{{ .Values.frontend.hostName }}"
          grpcport: "{{ .Values.frontend.grpcPort }}"
          httpport: "{{ .Values.frontend.httpPort }}"
        mmlogic:
          hostname: "{{ .Values.mmlogic.hostName }}"
          grpcport: "{{ .Values.mmlogic.grpcPort }}"
          httpport: "{{ .Values.mmlogic.httpPort }}"
        synchronizer:
          hostname: "{{ .Values.synchronizer.hostName }}"
          grpcport: "{{ .Values.synchronizer.grpcPort }}"
          httpport: "{{ .Values.synchronizer.httpPort }}"
        swaggerui:
          hostname: "{{ .Values.swaggerui.hostName }}"
          httpport: "{{ .Values.swaggerui.httpPort }}"
        evaluator:
          hostname: "{{ .Values.evaluator.hostName }}"
          grpcport: "{{ .Values.evaluator.grpcPort }}"
          httpport: "{{ .Values.evaluator.httpPort }}"

      synchronizer:
        enabled: false
        registrationIntervalMs: 3000ms
        proposalCollectionIntervalMs: 2000ms

      telemetry:
        jaeger:
          enable: "{{ .Values.global.telemetry.jaeger.enabled }}"
          agentEndpoint: "{{ .Values.global.telemetry.jaeger.agentEndpoint }}"
          collectorEndpoint: "{{ .Values.global.telemetry.jaeger.collectorEndpoint }}"
        prometheus:
          enable: "{{ .Values.global.telemetry.prometheus.enabled }}"
          endpoint: "{{ .Values.global.telemetry.prometheus.endpoint }}"
          serviceDiscovery: "{{ .Values.global.telemetry.prometheus.serviceDiscovery }}"
        stackdriver:
          enable: "{{ .Values.global.telemetry.stackdriver.enabled }}"
          gcpProjectId: "{{ .Values.global.telemetry.stackdriver.gcpProjectId }}"
          metricPrefix: "{{ .Values.global.telemetry.stackdriver.metricPrefix }}"
        zipkin:
          enable: "{{ .Values.global.telemetry.zipkin.enabled }}"
          endpoint: "{{ .Values.global.telemetry.zipkin.endpoint }}"
          reporterEndpoint: "{{ .Values.global.telemetry.zipkin.reporterEndpoint }}"
        reportingPeriod: "{{ .Values.global.telemetry.reportingPeriod }}"
      
      storage:
        page:
          size: 10000
      
      redis:
        pool:
          maxIdle: 3
          maxActive: 0
          idleTimeout: 60s
          healthCheckTimeout: 100ms
        ignoreLists:
          ttl: 1000ms
        expiration: 43200
      
      ticketIndices: *ticketIndicesData

# https://hub.helm.sh/charts/stable/redis
# https://github.com/helm/charts/tree/master/stable/redis
redis:
  enabled: true
  fullnameOverride: om-redis
  usePassword: true
  master:
    disableCommands: [] # don't disable 'FLUSH-' commands
  metrics:
    enabled: true
