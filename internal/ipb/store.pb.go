// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/api/store.proto

package ipb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
	pb "open-match.dev/open-match/pkg/pb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IndexUpdatesRequest struct {
	Watermark            int64    `protobuf:"varint,1,opt,name=watermark,proto3" json:"watermark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexUpdatesRequest) Reset()         { *m = IndexUpdatesRequest{} }
func (m *IndexUpdatesRequest) String() string { return proto.CompactTextString(m) }
func (*IndexUpdatesRequest) ProtoMessage()    {}
func (*IndexUpdatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{0}
}

func (m *IndexUpdatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexUpdatesRequest.Unmarshal(m, b)
}
func (m *IndexUpdatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexUpdatesRequest.Marshal(b, m, deterministic)
}
func (m *IndexUpdatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexUpdatesRequest.Merge(m, src)
}
func (m *IndexUpdatesRequest) XXX_Size() int {
	return xxx_messageInfo_IndexUpdatesRequest.Size(m)
}
func (m *IndexUpdatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexUpdatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IndexUpdatesRequest proto.InternalMessageInfo

func (m *IndexUpdatesRequest) GetWatermark() int64 {
	if m != nil {
		return m.Watermark
	}
	return 0
}

type IndexUpdatesResponse struct {
	AddedTickets         []*pb.Ticket `protobuf:"bytes,1,rep,name=added_tickets,json=addedTickets,proto3" json:"added_tickets,omitempty"`
	RemovedTicketIds     []string     `protobuf:"bytes,2,rep,name=removed_ticket_ids,json=removedTicketIds,proto3" json:"removed_ticket_ids,omitempty"`
	Watermark            int64        `protobuf:"varint,3,opt,name=watermark,proto3" json:"watermark,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *IndexUpdatesResponse) Reset()         { *m = IndexUpdatesResponse{} }
func (m *IndexUpdatesResponse) String() string { return proto.CompactTextString(m) }
func (*IndexUpdatesResponse) ProtoMessage()    {}
func (*IndexUpdatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{1}
}

func (m *IndexUpdatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexUpdatesResponse.Unmarshal(m, b)
}
func (m *IndexUpdatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexUpdatesResponse.Marshal(b, m, deterministic)
}
func (m *IndexUpdatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexUpdatesResponse.Merge(m, src)
}
func (m *IndexUpdatesResponse) XXX_Size() int {
	return xxx_messageInfo_IndexUpdatesResponse.Size(m)
}
func (m *IndexUpdatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexUpdatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IndexUpdatesResponse proto.InternalMessageInfo

func (m *IndexUpdatesResponse) GetAddedTickets() []*pb.Ticket {
	if m != nil {
		return m.AddedTickets
	}
	return nil
}

func (m *IndexUpdatesResponse) GetRemovedTicketIds() []string {
	if m != nil {
		return m.RemovedTicketIds
	}
	return nil
}

func (m *IndexUpdatesResponse) GetWatermark() int64 {
	if m != nil {
		return m.Watermark
	}
	return 0
}

type DeindexTicketRequest struct {
	TicketId             string   `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeindexTicketRequest) Reset()         { *m = DeindexTicketRequest{} }
func (m *DeindexTicketRequest) String() string { return proto.CompactTextString(m) }
func (*DeindexTicketRequest) ProtoMessage()    {}
func (*DeindexTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{2}
}

func (m *DeindexTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeindexTicketRequest.Unmarshal(m, b)
}
func (m *DeindexTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeindexTicketRequest.Marshal(b, m, deterministic)
}
func (m *DeindexTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeindexTicketRequest.Merge(m, src)
}
func (m *DeindexTicketRequest) XXX_Size() int {
	return xxx_messageInfo_DeindexTicketRequest.Size(m)
}
func (m *DeindexTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeindexTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeindexTicketRequest proto.InternalMessageInfo

func (m *DeindexTicketRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

type DeindexTicketResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeindexTicketResponse) Reset()         { *m = DeindexTicketResponse{} }
func (m *DeindexTicketResponse) String() string { return proto.CompactTextString(m) }
func (*DeindexTicketResponse) ProtoMessage()    {}
func (*DeindexTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{3}
}

func (m *DeindexTicketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeindexTicketResponse.Unmarshal(m, b)
}
func (m *DeindexTicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeindexTicketResponse.Marshal(b, m, deterministic)
}
func (m *DeindexTicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeindexTicketResponse.Merge(m, src)
}
func (m *DeindexTicketResponse) XXX_Size() int {
	return xxx_messageInfo_DeindexTicketResponse.Size(m)
}
func (m *DeindexTicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeindexTicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeindexTicketResponse proto.InternalMessageInfo

type CreateTicketRequest struct {
	Ticket               *pb.Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateTicketRequest) Reset()         { *m = CreateTicketRequest{} }
func (m *CreateTicketRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTicketRequest) ProtoMessage()    {}
func (*CreateTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{4}
}

func (m *CreateTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTicketRequest.Unmarshal(m, b)
}
func (m *CreateTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTicketRequest.Marshal(b, m, deterministic)
}
func (m *CreateTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTicketRequest.Merge(m, src)
}
func (m *CreateTicketRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTicketRequest.Size(m)
}
func (m *CreateTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTicketRequest proto.InternalMessageInfo

func (m *CreateTicketRequest) GetTicket() *pb.Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

type CreateTicketResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTicketResponse) Reset()         { *m = CreateTicketResponse{} }
func (m *CreateTicketResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTicketResponse) ProtoMessage()    {}
func (*CreateTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{5}
}

func (m *CreateTicketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTicketResponse.Unmarshal(m, b)
}
func (m *CreateTicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTicketResponse.Marshal(b, m, deterministic)
}
func (m *CreateTicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTicketResponse.Merge(m, src)
}
func (m *CreateTicketResponse) XXX_Size() int {
	return xxx_messageInfo_CreateTicketResponse.Size(m)
}
func (m *CreateTicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTicketResponse proto.InternalMessageInfo

type AssignTicketsRequest struct {
	TicketIds            []string `protobuf:"bytes,1,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignTicketsRequest) Reset()         { *m = AssignTicketsRequest{} }
func (m *AssignTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*AssignTicketsRequest) ProtoMessage()    {}
func (*AssignTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{6}
}

func (m *AssignTicketsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignTicketsRequest.Unmarshal(m, b)
}
func (m *AssignTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignTicketsRequest.Marshal(b, m, deterministic)
}
func (m *AssignTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignTicketsRequest.Merge(m, src)
}
func (m *AssignTicketsRequest) XXX_Size() int {
	return xxx_messageInfo_AssignTicketsRequest.Size(m)
}
func (m *AssignTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignTicketsRequest proto.InternalMessageInfo

func (m *AssignTicketsRequest) GetTicketIds() []string {
	if m != nil {
		return m.TicketIds
	}
	return nil
}

type AssignTicketsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignTicketsResponse) Reset()         { *m = AssignTicketsResponse{} }
func (m *AssignTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*AssignTicketsResponse) ProtoMessage()    {}
func (*AssignTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{7}
}

func (m *AssignTicketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignTicketsResponse.Unmarshal(m, b)
}
func (m *AssignTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignTicketsResponse.Marshal(b, m, deterministic)
}
func (m *AssignTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignTicketsResponse.Merge(m, src)
}
func (m *AssignTicketsResponse) XXX_Size() int {
	return xxx_messageInfo_AssignTicketsResponse.Size(m)
}
func (m *AssignTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignTicketsResponse proto.InternalMessageInfo

type AssignmentSubscribeRequest struct {
	TicketId             string   `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssignmentSubscribeRequest) Reset()         { *m = AssignmentSubscribeRequest{} }
func (m *AssignmentSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*AssignmentSubscribeRequest) ProtoMessage()    {}
func (*AssignmentSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{8}
}

func (m *AssignmentSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignmentSubscribeRequest.Unmarshal(m, b)
}
func (m *AssignmentSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignmentSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *AssignmentSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentSubscribeRequest.Merge(m, src)
}
func (m *AssignmentSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_AssignmentSubscribeRequest.Size(m)
}
func (m *AssignmentSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentSubscribeRequest proto.InternalMessageInfo

func (m *AssignmentSubscribeRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

type AssignmentSubscribeResponse struct {
	TicketIds            []string       `protobuf:"bytes,1,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
	Assignment           *pb.Assignment `protobuf:"bytes,2,opt,name=assignment,proto3" json:"assignment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AssignmentSubscribeResponse) Reset()         { *m = AssignmentSubscribeResponse{} }
func (m *AssignmentSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*AssignmentSubscribeResponse) ProtoMessage()    {}
func (*AssignmentSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b5164f402c10d4, []int{9}
}

func (m *AssignmentSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignmentSubscribeResponse.Unmarshal(m, b)
}
func (m *AssignmentSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignmentSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *AssignmentSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentSubscribeResponse.Merge(m, src)
}
func (m *AssignmentSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_AssignmentSubscribeResponse.Size(m)
}
func (m *AssignmentSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentSubscribeResponse proto.InternalMessageInfo

func (m *AssignmentSubscribeResponse) GetTicketIds() []string {
	if m != nil {
		return m.TicketIds
	}
	return nil
}

func (m *AssignmentSubscribeResponse) GetAssignment() *pb.Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func init() {
	proto.RegisterType((*IndexUpdatesRequest)(nil), "api.internal.IndexUpdatesRequest")
	proto.RegisterType((*IndexUpdatesResponse)(nil), "api.internal.IndexUpdatesResponse")
	proto.RegisterType((*DeindexTicketRequest)(nil), "api.internal.DeindexTicketRequest")
	proto.RegisterType((*DeindexTicketResponse)(nil), "api.internal.DeindexTicketResponse")
	proto.RegisterType((*CreateTicketRequest)(nil), "api.internal.CreateTicketRequest")
	proto.RegisterType((*CreateTicketResponse)(nil), "api.internal.CreateTicketResponse")
	proto.RegisterType((*AssignTicketsRequest)(nil), "api.internal.AssignTicketsRequest")
	proto.RegisterType((*AssignTicketsResponse)(nil), "api.internal.AssignTicketsResponse")
	proto.RegisterType((*AssignmentSubscribeRequest)(nil), "api.internal.AssignmentSubscribeRequest")
	proto.RegisterType((*AssignmentSubscribeResponse)(nil), "api.internal.AssignmentSubscribeResponse")
}

func init() { proto.RegisterFile("internal/api/store.proto", fileDescriptor_30b5164f402c10d4) }

var fileDescriptor_30b5164f402c10d4 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x6e, 0xd4, 0x40,
	0x10, 0x94, 0x63, 0x11, 0xe1, 0x8e, 0x03, 0x68, 0xd6, 0x80, 0xe5, 0x80, 0xb4, 0x38, 0x17, 0x23,
	0x21, 0x6f, 0x94, 0x15, 0x07, 0xb8, 0xf1, 0xb8, 0xe4, 0xea, 0x10, 0x09, 0xb8, 0x44, 0xe3, 0xb8,
	0x15, 0x8d, 0x82, 0x1f, 0x4c, 0x4f, 0x80, 0x0f, 0xe1, 0xf7, 0xf8, 0x17, 0xe4, 0xf1, 0xac, 0xd7,
	0x1e, 0x8d, 0x56, 0x7b, 0x5c, 0x77, 0x55, 0x6d, 0x55, 0x77, 0x69, 0x20, 0x16, 0x8d, 0x42, 0xd9,
	0xf0, 0x1f, 0x2b, 0xde, 0x89, 0x15, 0xa9, 0x56, 0x62, 0xde, 0xc9, 0x56, 0xb5, 0x2c, 0xe4, 0x9d,
	0xc8, 0x37, 0xd3, 0x84, 0xf5, 0xe3, 0x1a, 0x89, 0xf8, 0x2d, 0xd2, 0x80, 0x48, 0xd7, 0xb0, 0xb8,
	0x68, 0x2a, 0xfc, 0x73, 0xd5, 0x55, 0x5c, 0x21, 0x15, 0xf8, 0xf3, 0x1e, 0x49, 0xb1, 0x17, 0x10,
	0xfc, 0xe6, 0x0a, 0x65, 0xcd, 0xe5, 0x5d, 0xec, 0x2d, 0xbd, 0xcc, 0x2f, 0xb6, 0x1f, 0xd2, 0xbf,
	0x1e, 0x44, 0x73, 0x16, 0x75, 0x6d, 0x43, 0xc8, 0xce, 0xe0, 0x98, 0x57, 0x15, 0x56, 0xd7, 0x4a,
	0xdc, 0xdc, 0xa1, 0xa2, 0xd8, 0x5b, 0xfa, 0xd9, 0xd1, 0xf9, 0x51, 0xde, 0xfb, 0xf8, 0xa2, 0xbf,
	0x15, 0xa1, 0x46, 0x0c, 0x3f, 0x88, 0xbd, 0x01, 0x26, 0xb1, 0x6e, 0x7f, 0x8d, 0x9c, 0x6b, 0x51,
	0x51, 0x7c, 0xb0, 0xf4, 0xb3, 0xa0, 0x78, 0x62, 0x26, 0x03, 0xf6, 0xa2, 0xa2, 0xb9, 0x2d, 0xdf,
	0xb6, 0xb5, 0x86, 0xe8, 0x33, 0x8a, 0xde, 0x97, 0xf9, 0x2b, 0x13, 0xe6, 0x04, 0x82, 0x51, 0x5b,
	0x87, 0x09, 0x8a, 0x87, 0xca, 0x68, 0xa6, 0xcf, 0xe1, 0xa9, 0x45, 0x1a, 0xb2, 0xa4, 0xef, 0x61,
	0xf1, 0x49, 0x22, 0x57, 0x38, 0x17, 0x3b, 0x85, 0xc3, 0x81, 0xab, 0x95, 0xac, 0x6c, 0x66, 0x94,
	0x3e, 0x83, 0x68, 0xce, 0x35, 0x9a, 0x6f, 0x21, 0xfa, 0x40, 0x24, 0x6e, 0x1b, 0x13, 0x7f, 0x23,
	0xfa, 0x12, 0x60, 0x92, 0xde, 0xd3, 0xe9, 0x83, 0x8d, 0x45, 0xea, 0x3d, 0x5a, 0x34, 0xa3, 0xf7,
	0x0e, 0x92, 0x61, 0x50, 0x63, 0xa3, 0x2e, 0xef, 0x4b, 0xba, 0x91, 0xa2, 0xc4, 0xbd, 0x72, 0xd7,
	0x70, 0xe2, 0xa4, 0x9a, 0x4b, 0xee, 0x76, 0xc4, 0x56, 0x00, 0x7c, 0x64, 0xc7, 0x07, 0x7a, 0x13,
	0x8f, 0xf5, 0x26, 0xb6, 0xa2, 0xc5, 0x04, 0x72, 0xfe, 0xcf, 0x87, 0x07, 0x97, 0x7d, 0x33, 0xd9,
	0x37, 0x08, 0xa7, 0xdd, 0x61, 0xaf, 0xf2, 0x69, 0x49, 0x73, 0x47, 0x1b, 0x93, 0x74, 0x17, 0x64,
	0x30, 0x9c, 0x79, 0x67, 0x1e, 0xfb, 0x0a, 0xc7, 0xb3, 0x5b, 0x32, 0x8b, 0xe8, 0x6a, 0x47, 0x72,
	0xba, 0x13, 0x63, 0xd6, 0x71, 0x05, 0xe1, 0xf4, 0xa0, 0xb6, 0x69, 0x47, 0x51, 0x6c, 0xd3, 0xae,
	0x3e, 0xf4, 0x86, 0x67, 0x87, 0xb5, 0x0d, 0xbb, 0xca, 0x62, 0x1b, 0x76, 0x36, 0x83, 0x35, 0xb0,
	0x70, 0x9c, 0x97, 0x65, 0x2e, 0xae, 0xab, 0x3c, 0xc9, 0xeb, 0x3d, 0x90, 0xdb, 0xd5, 0x7f, 0x7c,
	0xf4, 0x3d, 0x1c, 0x5f, 0x21, 0xd1, 0x95, 0xe5, 0xa1, 0x7e, 0x5e, 0xd6, 0xff, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x33, 0x14, 0xec, 0xb4, 0x9c, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StoreClient interface {
	IndexUpdates(ctx context.Context, opts ...grpc.CallOption) (Store_IndexUpdatesClient, error)
	DeindexTicket(ctx context.Context, in *DeindexTicketRequest, opts ...grpc.CallOption) (*DeindexTicketResponse, error)
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	AssignTickets(ctx context.Context, in *AssignTicketsRequest, opts ...grpc.CallOption) (*AssignTicketsResponse, error)
	AssignmentSubscribe(ctx context.Context, opts ...grpc.CallOption) (Store_AssignmentSubscribeClient, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) IndexUpdates(ctx context.Context, opts ...grpc.CallOption) (Store_IndexUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Store_serviceDesc.Streams[0], "/api.internal.Store/IndexUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeIndexUpdatesClient{stream}
	return x, nil
}

type Store_IndexUpdatesClient interface {
	Send(*IndexUpdatesRequest) error
	Recv() (*IndexUpdatesResponse, error)
	grpc.ClientStream
}

type storeIndexUpdatesClient struct {
	grpc.ClientStream
}

func (x *storeIndexUpdatesClient) Send(m *IndexUpdatesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storeIndexUpdatesClient) Recv() (*IndexUpdatesResponse, error) {
	m := new(IndexUpdatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) DeindexTicket(ctx context.Context, in *DeindexTicketRequest, opts ...grpc.CallOption) (*DeindexTicketResponse, error) {
	out := new(DeindexTicketResponse)
	err := c.cc.Invoke(ctx, "/api.internal.Store/DeindexTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, "/api.internal.Store/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) AssignTickets(ctx context.Context, in *AssignTicketsRequest, opts ...grpc.CallOption) (*AssignTicketsResponse, error) {
	out := new(AssignTicketsResponse)
	err := c.cc.Invoke(ctx, "/api.internal.Store/AssignTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) AssignmentSubscribe(ctx context.Context, opts ...grpc.CallOption) (Store_AssignmentSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Store_serviceDesc.Streams[1], "/api.internal.Store/AssignmentSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeAssignmentSubscribeClient{stream}
	return x, nil
}

type Store_AssignmentSubscribeClient interface {
	Send(*AssignmentSubscribeRequest) error
	Recv() (*AssignmentSubscribeResponse, error)
	grpc.ClientStream
}

type storeAssignmentSubscribeClient struct {
	grpc.ClientStream
}

func (x *storeAssignmentSubscribeClient) Send(m *AssignmentSubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storeAssignmentSubscribeClient) Recv() (*AssignmentSubscribeResponse, error) {
	m := new(AssignmentSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StoreServer is the server API for Store service.
type StoreServer interface {
	IndexUpdates(Store_IndexUpdatesServer) error
	DeindexTicket(context.Context, *DeindexTicketRequest) (*DeindexTicketResponse, error)
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	AssignTickets(context.Context, *AssignTicketsRequest) (*AssignTicketsResponse, error)
	AssignmentSubscribe(Store_AssignmentSubscribeServer) error
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_IndexUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).IndexUpdates(&storeIndexUpdatesServer{stream})
}

type Store_IndexUpdatesServer interface {
	Send(*IndexUpdatesResponse) error
	Recv() (*IndexUpdatesRequest, error)
	grpc.ServerStream
}

type storeIndexUpdatesServer struct {
	grpc.ServerStream
}

func (x *storeIndexUpdatesServer) Send(m *IndexUpdatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storeIndexUpdatesServer) Recv() (*IndexUpdatesRequest, error) {
	m := new(IndexUpdatesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Store_DeindexTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeindexTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DeindexTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.internal.Store/DeindexTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DeindexTicket(ctx, req.(*DeindexTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.internal.Store/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_AssignTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).AssignTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.internal.Store/AssignTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).AssignTickets(ctx, req.(*AssignTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_AssignmentSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).AssignmentSubscribe(&storeAssignmentSubscribeServer{stream})
}

type Store_AssignmentSubscribeServer interface {
	Send(*AssignmentSubscribeResponse) error
	Recv() (*AssignmentSubscribeRequest, error)
	grpc.ServerStream
}

type storeAssignmentSubscribeServer struct {
	grpc.ServerStream
}

func (x *storeAssignmentSubscribeServer) Send(m *AssignmentSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storeAssignmentSubscribeServer) Recv() (*AssignmentSubscribeRequest, error) {
	m := new(AssignmentSubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.internal.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeindexTicket",
			Handler:    _Store_DeindexTicket_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _Store_CreateTicket_Handler,
		},
		{
			MethodName: "AssignTickets",
			Handler:    _Store_AssignTickets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IndexUpdates",
			Handler:       _Store_IndexUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AssignmentSubscribe",
			Handler:       _Store_AssignmentSubscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/api/store.proto",
}
