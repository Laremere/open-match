// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openmatch.internal;
option go_package = "open-match.dev/open-match/internal/ipb";

import "api/messages.proto";

message FirehoseRequest {
}

message FirehoseResponse {
  // 0 means no watermark
  uint64 watermark = 1;
  bool frozen = 2;

  oneof update {
    openmatch.Ticket new_ticket = 3;
    string relisted_id = 4;
    string pending_id = 5;
    string assigned_id = 6;
    string deleted_id = 7;
  }

  //repeated openmatch.Ticket new_tickets = 3;
  //map<string, State> state_updates = 4;
}

message CreateTicketRequest {
	openmatch.Ticket ticket = 1;
}

message CreateTicketResponse {}

message GetTicketRequest {
	string id = 1;
}

message GetTicketResponse {
	openmatch.Ticket ticket = 1;
	openmatch.Assignment assignment = 2;
}

message AssignTicketsRequest {
	repeated string ids = 1;
	openmatch.Assignment assignment = 2;
}

message AssignTicketsResponse {}

message MarkPendingRequest{
	repeated string ids = 1;
}

message MarkPendingResponse {
	// Improvement: Return ids already assigned or removed, to fail matches.
}

message FreezeRequest {
	bool freeze = 1;
}

message FreezeResponse {}

message GetCurrentWatermarkRequest{}

message GetCurrentWatermarkResponse{
	uint64 watermark = 1;
}

service Store {
  rpc Firehose(FirehoseRequest) returns (stream FirehoseResponse);
  rpc CreateTicket(CreateTicketRequest) returns (CreateTicketResponse);
  rpc GetTicket(GetTicketRequest) returns (GetTicketResponse);
  rpc AssignTickets(AssignTicketsRequest) returns (AssignTicketsResponse);
  rpc MarkPending(MarkPendingRequest) returns (MarkPendingResponse);
  rpc Freeze(FreezeRequest) returns (FreezeResponse);
  rpc GetCurrentWatermark(GetCurrentWatermarkRequest) returns (GetCurrentWatermarkResponse);
}


