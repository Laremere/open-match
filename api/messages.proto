// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package api;
option go_package = "internal/future/pb";


import "google/protobuf/any.proto";

message Ticket {
  string id = 1;

  google.protobuf.Any properties = 2;

  map<string, double> dargs = 3;
  map<string, string> sargs = 4;
}

message Assignment {
  string connection = 1;
  google.protobuf.Any properties = 2;
  string error = 3;
  bool client_update_required = 4;
}

//////////////////////////////////////////////////////////////

message Query {
  repeated Filter filters = 1;
}

message Filter {
  oneof value {
    StringFilter string_filter = 2;
    DoubleFilter double_filter = 3;
    PoolIndex pool_index = 4;
    // QuadIndex quad_index = 3;
    // OctIndex oct_index = 4;
    // Add index for direct id lookup?
    // partition based on string or double value
  }

  int32 index_timeout_seconds = 1;
}

message StringFilter {
  // Index Parameters
  string sarg = 1;

  // Query Parameters
  oneof filter_method {
    string equals = 2;
    StringSet in_set = 3;
    string contains = 4;
  }

  // Finds all of the string that aren't included by the filter method instead.
  bool invert = 5;
}

message StringSet {
  repeated string value = 1;
}

message DoubleFilter {
  // Index Parameters
  string darg = 1;

  // Query Parameters
  double min = 2; // inclusive
  double max = 3; // inclusive (so you can query an exact number via min=max)

}

// This "index" merely keeps track of all of the tickets which match the
// preceding filters.  Instead of finding the tickets which match at query
// time, this finds them when tickets are added to the system, and merely
// returns the existing slice at query time.
message PoolIndex {}
