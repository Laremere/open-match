{
  "swagger": "2.0",
  "info": {
    "title": "Backend",
    "version": "1.0",
    "contact": {
      "name": "Open Match",
      "url": "https://open-match.dev",
      "email": "open-match-discuss@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://github.com/GoogleCloudPlatform/open-match/blob/master/LICENSE"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/backend/matches:fetch": {
      "post": {
        "summary": "FetchMatch triggers execution of the specfied MatchFunction for each of the\nspecified MatchProfiles. Each MatchFunction execution returns a set of\nproposals which are then evaluated to generate results. FetchMatch method\nstreams these results back to the caller.",
        "operationId": "FetchMatches",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/apiFetchMatchesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiFetchMatchesRequest"
            }
          }
        ],
        "tags": [
          "Backend"
        ]
      }
    },
    "/v1/backend/tickets:assign": {
      "post": {
        "summary": "AssignTickets sets the specified Assignment on the Tickets for the Ticket\nIDs passed.",
        "operationId": "AssignTickets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAssignTicketsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAssignTicketsRequest"
            }
          }
        ],
        "tags": [
          "Backend"
        ]
      }
    }
  },
  "definitions": {
    "apiAssignTicketsRequest": {
      "type": "object",
      "properties": {
        "ticket_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of Ticket IDs for which the Assignment is to be made."
        },
        "assignment": {
          "$ref": "#/definitions/apiAssignment",
          "description": "Assignment to be associated with the Ticket IDs."
        }
      }
    },
    "apiAssignTicketsResponse": {
      "type": "object"
    },
    "apiAssignment": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "string",
          "description": "Connection information for this Assignment."
        },
        "properties": {
          "type": "string",
          "description": "Other details to be sent to the players. (Optional)\nOpen Match does not interpret these properties."
        },
        "error": {
          "type": "string",
          "description": "Error when finding an Assignment for this Ticket."
        }
      },
      "description": "An Assignment object represents the assignment associated with a Ticket."
    },
    "apiFetchMatchesRequest": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/apiFunctionConfig",
          "title": "Configuration of the MatchFunction to be executed for the given list of MatchProfiles"
        },
        "profile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMatchProfile"
          },
          "description": "MatchProfiles for which this MatchFunction should be executed."
        }
      }
    },
    "apiFetchMatchesResponse": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/apiMatch",
          "description": "Result Match for the requested MatchProfile."
        }
      }
    },
    "apiFilter": {
      "type": "object",
      "properties": {
        "attribute": {
          "type": "string",
          "description": "Name of the ticket attribute this Filter operates on."
        },
        "max": {
          "type": "number",
          "format": "double",
          "description": "Maximum value. Defaults to positive infinity (any value above minv)."
        },
        "min": {
          "type": "number",
          "format": "double",
          "description": "Minimum value. Defaults to 0."
        }
      },
      "description": "A hard filter used to query a subset of Tickets meeting the filtering\ncriteria."
    },
    "apiFunctionConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Match Function."
        },
        "grpc": {
          "$ref": "#/definitions/apiGrpcFunctionConfig"
        },
        "rest": {
          "$ref": "#/definitions/apiRestFunctionConfig"
        }
      },
      "description": "Configuration for the Match Function to be triggered by Open Match to\ngenerate proposals."
    },
    "apiGrpcFunctionConfig": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Configuration for a GRPC Match Function"
    },
    "apiMatch": {
      "type": "object",
      "properties": {
        "match_id": {
          "type": "string",
          "description": "A Match ID that should be passed through the stack for tracing."
        },
        "match_profile": {
          "type": "string",
          "description": "Name of the match profile that generated this Match."
        },
        "match_function": {
          "type": "string",
          "description": "Name of the match function that generated this Match."
        },
        "ticket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTicket"
          },
          "description": "Tickets belonging to this match."
        },
        "roster": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRoster"
          },
          "title": "Set of Rosters that comprise this Match"
        },
        "properties": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Match properties for this Match. Open Match does not interpret this field."
        }
      },
      "description": "A Match is used to represent a completed match object. It can be generated by\na MatchFunction as a proposal or can be returned by OpenMatch as a result in\nresponse to the FetchMatches call."
    },
    "apiMatchProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this match profile."
        },
        "properties": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Set of properties associated with this MatchProfile. (Optional)\nOpen Match does not interpret these properties but passes them through to\nthe MatchFunction."
        },
        "pool": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPool"
          },
          "description": "Set of pools to be queried when generating a match for this MatchProfile.\nThe pool names can be used in empty Rosters to specify composition of a\nmatch."
        },
        "roster": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRoster"
          },
          "description": "Set of Rosters for this match request. Could be empty Rosters used to\nindicate the composition of the generated Match or they could be partially\npre-populated Ticket list to be used in scenarios such as backfill / join\nin progress."
        }
      },
      "description": "A MatchProfile is Open Match's representation of a Match specification. It is\nused to indicate the criteria for selecting players for a match. A\nMatchProfile is the input to the API to get matches and is passed to the\nMatchFunction. It contains all the information required by the MatchFunction\nto generate match proposals."
    },
    "apiPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Pool."
        },
        "filter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFilter"
          },
          "description": "Set of Filters indicating the filtering criteria. Selected players must\nmatch every Filter."
        }
      }
    },
    "apiRestFunctionConfig": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Configuration for a REST Match Function."
    },
    "apiRoster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Roster."
        },
        "ticket_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tickets belonging to this Roster."
        }
      },
      "description": "A Roster is a named collection of Ticket IDs. It exists so that a Tickets\nassociated with a Match can be labelled to belong to a team, sub-team etc. It\ncan also be used to represent the current state of a Match in scenarios such\nas backfill, join-in-progress etc."
    },
    "apiTicket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Ticket ID generated by Open Match."
        },
        "properties": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Properties contains custom info about the ticket.  Top level values can be\nused in indexing and filtering to find tickets."
        },
        "assignment": {
          "$ref": "#/definitions/apiAssignment",
          "description": "Assignment associated with the Ticket."
        }
      },
      "description": "A Ticket is a basic matchmaking entity in Open Match. In order to enter\nmatchmaking using Open Match, the client should generate a Ticket, passing in\nthe properties to be associated with this Ticket. Open Match will generate an\nID for a Ticket during creation. A Ticket could be used to represent an\nindividual 'Player' or a 'Group' of players. Open Match will not interpret\nwhat the Ticket represents but just treat it as a matchmaking unit with a set\nof properties. Open Match stores the Ticket in state storage and enables an\nAssignment to be associated with this Ticket."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiFetchMatchesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiFetchMatchesResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiFetchMatchesResponse"
    }
  },
  "externalDocs": {
    "description": "Open Match Documentation",
    "url": "https://open-match.dev/site/docs/"
  }
}
