// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openmatch;
option go_package = "open-match.dev/open-match/pkg/pb";
option csharp_namespace = "OpenMatch";

import "api/messages.proto";
import "google/api/annotations.proto";
import "google/rpc/status.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Backend"
    version: "1.0"
    contact: {
      name: "Open Match"
      url: "https://open-match.dev"
      email: "open-match-discuss@googlegroups.com"
    }
    license: {
      name: "Apache 2.0 License"
      url: "https://github.com/googleforgames/open-match/blob/master/LICENSE"
    }
  }
  external_docs: {
    url: "https://open-match.dev/site/docs/"
    description: "Open Match Documentation"
  }
  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  responses: {
    key: "404"
    value: {
      description: "Returned when the resource does not exist."
      schema: { json_schema: { type: STRING } }
    }
  }
  // TODO Add annotations for security_defintiions.
  // See
  // https://github.com/grpc-ecosystem/grpc-gateway/blob/master/examples/proto/examplepb/a_bit_of_everything.proto
};

// FunctionConfig specifies a MMF address and client type for Backend to establish connections with the MMF
message FunctionConfig {
  string host = 1;
  int32 port = 2;
  Type type = 3;
  enum Type {
    GRPC = 0;
    REST = 1;
  }
}

message FetchMatchesRequest {
  // FunctionConfig specifies a MMF address and client type for Backend to establish connections with the MMF
  FunctionConfig config = 1;

  // MatchProfiles that will be sent to thhe MMF specified in the FunctionConfig.
  MatchProfile profile = 2;
}

message FetchMatchesResponse {
  // Fetch matches will return a stream of responses containing matches,
  // followed by a single FetchSummary before closing the response stream.
  oneof response {
    // A Match generated by the user-defined MMF with the specified
    // MatchProfiles. A valid Match response will contain at least one ticket.
    Match match = 1; 

    // Details of the call.  Don't ingore this field!  See warning on
    // FetchMatches for more info.
    FetchMatchesSummary fetch_matches_summary = 2;
  }
}

message FetchMatchesSummary {
  // Response status from running the matchfunction.  Will be present and OK in the event
  // of no errors.
  google.rpc.Status mmf_status = 1;

  // Response status from running the evaluator.  Will be present and OK in the event
  // of no errors.
  google.rpc.Status evaluator_status = 2;

  // Response status from internal Open Match system.  Will contain any errors
  // not originating from the mmf or evaluator.
  google.rpc.Status system_status = 3;
}

message AssignTicketsRequest {
  // TicketIds is a list of strings representing Open Match generated Ids which apply to an Assignment.
  repeated string ticket_ids = 1;

  // An Assignment specifies game connection related information to be associated with the TicketIds.
  Assignment assignment = 2;
}

message AssignTicketsResponse {}

// The BackendService implements APIs to generate matches and handle ticket assignments.
service BackendService {
  // FetchMatches triggers a MatchFunction with the specified MatchProfile, which
  // returns a set of match proposals.  Those proposals are sent to the evaluator to
  // deduplicate tickets in matches.  Then matches are streamed back to the fetch
  // matches call.  The stream ends with the FetchSummary.
  //
  // WARNING: FetchMatches DOES NOT return an error if the match function or evaluator
  // return an error.  This is done so that if they return partial results, those results can be
  // processed.  Make sure to inspect the FetchSummary's status for both the match function
  // and evaluator to log and otherwise handle errors.
  rpc FetchMatches(FetchMatchesRequest) returns (stream FetchMatchesResponse) {
    option (google.api.http) = {
      post: "/v1/backendservice/matches:fetch"
      body: "*"
    };
  }

  // AssignTickets overwrites the Assignment field of the input TicketIds.
  rpc AssignTickets(AssignTicketsRequest) returns (AssignTicketsResponse) {
    option (google.api.http) = {
      post: "/v1/backendservice/tickets:assign"
      body: "*"
    };
  }
}
